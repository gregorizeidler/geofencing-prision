#!/usr/bin/env python3
"""
Script para an√°lise estat√≠stica e espacial de pris√µes do Brasil
"""

import glob
import os
from typing import Dict, List
import geopandas as gpd
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from shapely.geometry import Point
import warnings
warnings.filterwarnings('ignore')


class PrisonAnalyzer:
    """Analisa dados de pris√µes extra√≠dos do OSM"""
    
    # Divis√£o de estados por regi√£o
    REGIONS = {
        'Norte': ['AC', 'AP', 'AM', 'PA', 'RO', 'RR', 'TO'],
        'Nordeste': ['AL', 'BA', 'CE', 'MA', 'PB', 'PE', 'PI', 'RN', 'SE'],
        'Centro-Oeste': ['DF', 'GO', 'MT', 'MS'],
        'Sudeste': ['ES', 'MG', 'RJ', 'SP'],
        'Sul': ['PR', 'RS', 'SC']
    }
    
    def __init__(self, prisons_file: str):
        """
        Args:
            prisons_file: caminho para arquivo GeoJSON/GPKG com pris√µes
        """
        print(f"üìÇ Carregando {prisons_file}...")
        self.prisons_gdf = gpd.read_file(prisons_file)
        
        # Adicionar coluna de regi√£o se n√£o existir
        if 'state' not in self.prisons_gdf.columns:
            self._add_state_info()
    
    def _add_state_info(self):
        """Adiciona informa√ß√£o de estado/regi√£o usando geocoding reverso simplificado"""
        # Para an√°lise completa, seria ideal usar um shapefile de estados
        # Por enquanto, vamos tentar extrair da tag 'addr:state' se existir
        
        if 'addr:state' in self.prisons_gdf.columns:
            self.prisons_gdf['state'] = self.prisons_gdf['addr:state']
        else:
            # Tentar inferir do nome ou criar coluna vazia
            self.prisons_gdf['state'] = 'Unknown'
        
        # Adicionar regi√£o
        state_to_region = {}
        for region, states in self.REGIONS.items():
            for state in states:
                state_to_region[state] = region
        
        self.prisons_gdf['region'] = self.prisons_gdf['state'].map(state_to_region).fillna('Unknown')
    
    def basic_statistics(self) -> Dict:
        """
        Calcula estat√≠sticas b√°sicas
        
        Returns:
            Dict com estat√≠sticas
        """
        print("\n" + "=" * 60)
        print("üìä ESTAT√çSTICAS B√ÅSICAS")
        print("=" * 60)
        
        stats = {
            'total_prisons': len(self.prisons_gdf),
            'by_type': {},
            'by_state': {},
            'by_region': {},
            'has_name': self.prisons_gdf['name'].notna().sum() if 'name' in self.prisons_gdf.columns else 0,
            'has_operator': self.prisons_gdf['operator'].notna().sum() if 'operator' in self.prisons_gdf.columns else 0,
        }
        
        print(f"\nüèõÔ∏è  Total de pris√µes: {stats['total_prisons']}")
        
        # Por tipo de geometria
        print(f"\nüìç Por tipo de representa√ß√£o:")
        type_counts = self.prisons_gdf['osm_type'].value_counts()
        for osm_type, count in type_counts.items():
            pct = (count / stats['total_prisons']) * 100
            print(f"   - {osm_type}: {count} ({pct:.1f}%)")
            stats['by_type'][osm_type] = count
        
        # Por regi√£o
        if 'region' in self.prisons_gdf.columns:
            print(f"\nüó∫Ô∏è  Por regi√£o:")
            region_counts = self.prisons_gdf['region'].value_counts()
            for region, count in region_counts.items():
                pct = (count / stats['total_prisons']) * 100
                print(f"   - {region}: {count} ({pct:.1f}%)")
                stats['by_region'][region] = count
        
        # Por estado (top 10)
        if 'state' in self.prisons_gdf.columns:
            print(f"\nüè¥ Top 10 estados:")
            state_counts = self.prisons_gdf['state'].value_counts().head(10)
            for state, count in state_counts.items():
                pct = (count / stats['total_prisons']) * 100
                print(f"   - {state}: {count} ({pct:.1f}%)")
                stats['by_state'][state] = count
        
        # Qualidade dos dados
        print(f"\n‚úì Qualidade dos dados:")
        print(f"   - Com nome: {stats['has_name']} ({stats['has_name']/stats['total_prisons']*100:.1f}%)")
        print(f"   - Com operador: {stats['has_operator']} ({stats['has_operator']/stats['total_prisons']*100:.1f}%)")
        
        # Verificar tags importantes
        important_tags = ['capacity', 'operator', 'name', 'addr:city', 'website']
        print(f"\nüè∑Ô∏è  Tags importantes:")
        for tag in important_tags:
            if tag in self.prisons_gdf.columns:
                count = self.prisons_gdf[tag].notna().sum()
                pct = (count / stats['total_prisons']) * 100
                print(f"   - {tag}: {count} ({pct:.1f}%)")
        
        return stats
    
    def analyze_clustering(self, distance_km: float = 50) -> pd.DataFrame:
        """
        Analisa clusters de pris√µes (proximidade)
        
        Args:
            distance_km: dist√¢ncia em km para considerar cluster
            
        Returns:
            DataFrame com pris√µes e seus vizinhos pr√≥ximos
        """
        print(f"\nüéØ Analisando clusters (dist√¢ncia < {distance_km}km)...")
        
        # Converter para proje√ß√£o m√©trica (Web Mercator) para c√°lculo de dist√¢ncia
        gdf_metric = self.prisons_gdf.to_crs(epsg=3857)
        
        # Criar buffer
        buffer_meters = distance_km * 1000
        gdf_metric['buffer'] = gdf_metric.geometry.buffer(buffer_meters)
        
        # Contar vizinhos
        neighbors = []
        for idx, prison in gdf_metric.iterrows():
            intersecting = gdf_metric[gdf_metric.geometry.within(prison['buffer'])]
            neighbor_count = len(intersecting) - 1  # Excluir ela mesma
            
            if neighbor_count > 0:
                neighbors.append({
                    'osm_id': prison['osm_id'],
                    'name': prison.get('name', 'Sem nome'),
                    'neighbors': neighbor_count
                })
        
        if neighbors:
            df_neighbors = pd.DataFrame(neighbors).sort_values('neighbors', ascending=False)
            print(f"\n   {len(df_neighbors)} pris√µes t√™m vizinhos pr√≥ximos")
            print(f"\n   Top 5 com mais vizinhos:")
            for _, row in df_neighbors.head().iterrows():
                print(f"   - {row['name']}: {row['neighbors']} vizinhos")
            return df_neighbors
        else:
            print(f"   Nenhum cluster encontrado")
            return pd.DataFrame()
    
    def analyze_infrastructure(self, infra_files: Dict[str, str]) -> Dict:
        """
        Analisa infraestrutura ao redor das pris√µes
        
        Args:
            infra_files: Dict com {tipo: caminho_arquivo}
            
        Returns:
            Dict com estat√≠sticas de infraestrutura
        """
        print("\n" + "=" * 60)
        print("üèóÔ∏è  AN√ÅLISE DE INFRAESTRUTURA")
        print("=" * 60)
        
        stats = {}
        
        for infra_type, filepath in infra_files.items():
            if not os.path.exists(filepath):
                continue
            
            print(f"\nüìç Analisando {infra_type}...")
            gdf = gpd.read_file(filepath)
            
            if gdf.empty:
                continue
            
            stats[infra_type] = {
                'total': len(gdf),
                'by_category': {}
            }
            
            print(f"   Total: {len(gdf)}")
            
            # An√°lise por subcategoria (se aplic√°vel)
            if infra_type == 'amenities' and 'amenity' in gdf.columns:
                top_amenities = gdf['amenity'].value_counts().head(10)
                print(f"   Top amenities:")
                for amenity, count in top_amenities.items():
                    print(f"      - {amenity}: {count}")
                    stats[infra_type]['by_category'][amenity] = count
            
            elif infra_type == 'buildings' and 'building' in gdf.columns:
                building_types = gdf['building'].value_counts().head(10)
                print(f"   Tipos de pr√©dios:")
                for btype, count in building_types.items():
                    print(f"      - {btype}: {count}")
                    stats[infra_type]['by_category'][btype] = count
            
            elif infra_type == 'highways' and 'highway' in gdf.columns:
                highway_types = gdf['highway'].value_counts().head(10)
                print(f"   Tipos de vias:")
                for htype, count in highway_types.items():
                    print(f"      - {htype}: {count}")
                    stats[infra_type]['by_category'][htype] = count
        
        return stats
    
    def generate_visualizations(self, output_dir: str = 'reports'):
        """
        Gera visualiza√ß√µes estat√≠sticas
        
        Args:
            output_dir: diret√≥rio para salvar gr√°ficos
        """
        os.makedirs(output_dir, exist_ok=True)
        
        print(f"\nüìà Gerando visualiza√ß√µes em {output_dir}/...")
        
        sns.set_style('whitegrid')
        
        # 1. Pris√µes por regi√£o
        if 'region' in self.prisons_gdf.columns:
            fig, ax = plt.subplots(figsize=(10, 6))
            region_counts = self.prisons_gdf['region'].value_counts()
            region_counts.plot(kind='bar', ax=ax, color='steelblue')
            ax.set_title('Pris√µes por Regi√£o - Brasil', fontsize=16, fontweight='bold')
            ax.set_xlabel('Regi√£o', fontsize=12)
            ax.set_ylabel('N√∫mero de Pris√µes', fontsize=12)
            plt.xticks(rotation=45)
            plt.tight_layout()
            plt.savefig(f'{output_dir}/prisons_by_region.png', dpi=300)
            print("   ‚úì prisons_by_region.png")
            plt.close()
        
        # 2. Top 15 estados
        if 'state' in self.prisons_gdf.columns:
            fig, ax = plt.subplots(figsize=(12, 6))
            state_counts = self.prisons_gdf['state'].value_counts().head(15)
            state_counts.plot(kind='barh', ax=ax, color='coral')
            ax.set_title('Top 15 Estados com Mais Pris√µes', fontsize=16, fontweight='bold')
            ax.set_xlabel('N√∫mero de Pris√µes', fontsize=12)
            ax.set_ylabel('Estado', fontsize=12)
            plt.tight_layout()
            plt.savefig(f'{output_dir}/prisons_by_state_top15.png', dpi=300)
            print("   ‚úì prisons_by_state_top15.png")
            plt.close()
        
        # 3. Distribui√ß√£o espacial (scatter)
        fig, ax = plt.subplots(figsize=(12, 10))
        self.prisons_gdf.plot(ax=ax, markersize=10, color='red', alpha=0.6)
        ax.set_title('Distribui√ß√£o Espacial das Pris√µes - Brasil', fontsize=16, fontweight='bold')
        ax.set_xlabel('Longitude', fontsize=12)
        ax.set_ylabel('Latitude', fontsize=12)
        plt.tight_layout()
        plt.savefig(f'{output_dir}/prisons_spatial_distribution.png', dpi=300)
        print("   ‚úì prisons_spatial_distribution.png")
        plt.close()
        
        print("‚úÖ Visualiza√ß√µes geradas!")


def main():
    """Fun√ß√£o principal"""
    print("=" * 60)
    print("  AN√ÅLISE DE PRIS√ïES DO BRASIL")
    print("=" * 60)
    
    # Buscar arquivo mais recente
    geojson_files = glob.glob('data/prisons_brazil_*.geojson')
    
    if not geojson_files:
        print("‚ùå Nenhum arquivo de pris√µes encontrado em data/")
        print("   Execute primeiro: python extract_prisons.py")
        return
    
    # Usar o mais recente
    latest_file = max(geojson_files, key=os.path.getctime)
    print(f"üìÇ Usando arquivo: {latest_file}")
    
    # Criar analisador
    analyzer = PrisonAnalyzer(latest_file)
    
    # Estat√≠sticas b√°sicas
    stats = analyzer.basic_statistics()
    
    # An√°lise de clusters
    analyzer.analyze_clustering(distance_km=50)
    
    # Buscar arquivos de infraestrutura
    timestamp = latest_file.split('_')[-1].replace('.geojson', '')
    infra_files = {
        'buildings': f'data/buildings_near_prisons_{timestamp}.geojson',
        'amenities': f'data/amenities_near_prisons_{timestamp}.geojson',
        'highways': f'data/highways_near_prisons_{timestamp}.geojson',
    }
    
    # Analisar infraestrutura se dispon√≠vel
    infra_available = any(os.path.exists(f) for f in infra_files.values())
    if infra_available:
        analyzer.analyze_infrastructure(infra_files)
    else:
        print("\n‚ö†Ô∏è  Arquivos de infraestrutura n√£o encontrados")
        print("   Execute extract_prisons.py com extra√ß√£o de infraestrutura")
    
    # Gerar visualiza√ß√µes
    analyzer.generate_visualizations()
    
    print("\n‚úÖ An√°lise conclu√≠da!")


if __name__ == "__main__":
    main()

